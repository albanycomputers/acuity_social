<?php


/**
 * Implements hook_autoload_info().
 *
 * Provides a direct map of class names to their file locations.
 */
function acuity_social_autoload_info() {
  return array(
    'AcuitySocialChannel' => 'includes/acuity_social_channel.class.inc',
    'AcuitySocialChannelController' => 'includes/acuity_social_channel.controller.inc',
    'AcuitySocialChat' => 'includes/acuity_social_chat.class.inc',
    'AcuitySocialChatController' => 'includes/acuity_social_chat.controller.inc',
    'acuity_social.admin.inc' => 'acuity_social.admin.inc',
  );
}

/**
 * Implements hook_menu().
 */
function acuity_social_menu() {
  $items = [];

  // Main administration page for Acuity Social.
  $items['admin/acuity/social'] = [
    'title' => 'Social Settings',
    'description' => 'Configure Acuity Social defaults and behavior.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => ['acuity_social_settings_form'],
    'access arguments' => ['administer acuity social'],
    'type' => MENU_NORMAL_ITEM,
  ];

  // Main administration page for Chat settings.
  $items['admin/acuity/social/chats'] = [
    'title' => 'Chat Fields',
    'description' => 'Configure Acuity Social defaults and behavior.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => ['acuity_social_settings_form'],
    'access arguments' => ['administer acuity social'],
    'type' => MENU_NORMAL_ITEM,
  ];

  // Main administration page for Chat settings.
  $items['admin/acuity/social/channels'] = [
    'title' => 'Channel Fields',
    'description' => 'Configure Acuity Social defaults and behavior.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => ['acuity_social_settings_form'],
    'access arguments' => ['administer acuity social'],
    'type' => MENU_NORMAL_ITEM,
  ];



// Page for viewing a single channel.
  $items['social-channel/%acuity_social_channel'] = [
    'title callback' => 'entity_label',
    'title arguments' => ['acuity_social_channel', 1],
    'page callback' => 'acuity_social_channel_page_view',
    'page arguments' => [1],
    'access callback' => 'acuity_social_channel_access',
    'access arguments' => ['view', 1],
  ];

  // Page for editing a channel.
  $items['social-channel/%acuity_social_channel/edit'] = [
    'title' => 'Edit',
    'page callback' => 'backdrop_get_form',
    'page arguments' => ['acuity_social_channel_form', 1],
    'access callback' => 'acuity_social_channel_access',
    'access arguments' => ['update', 1],
    'file' => 'acuity_social.admin.inc',
    'file path' => backdrop_get_path('module', 'acuity_social'),
    'type' => MENU_LOCAL_TASK,
  ];

  // Page for deleting a channel.
  $items['social-channel/%acuity_social_channel/delete'] = [
    'title' => 'Delete',
    'page callback' => 'backdrop_get_form', // Corrected function name
    'page arguments' => ['acuity_social_channel_delete_form', 1],
    'access callback' => 'acuity_social_channel_access',
    'access arguments' => ['delete', 1],
    'file' => 'acuity_social.admin.inc',
    'file path' => backdrop_get_path('module', 'acuity_social'),
    'type' => MENU_LOCAL_TASK,
  ];


  return $items;
}


function acuity_social_settings_form($form, &$form_state) {
  $config = config('acuity_social.settings');

  $form['forum_name'] = [
    '#type' => 'textfield',
    '#title' => t('Forum Name'),
    '#default_value' => $config->get('forum_name'),
    '#description' => t('The name of the social forum.'),
  ];

  $form['hero_header'] = [
    '#type' => 'textfield',
    '#title' => t('Hero Header'),
    '#default_value' => $config->get('hero_header'),
    '#description' => t('The header text displayed in the hero section of the forum.'),
  ];

  $form['hero_description'] = [
    '#type' => 'textarea',
    '#title' => t('Hero Description'),
    '#default_value' => $config->get('hero_description'),
    '#description' => t('A brief description displayed in the hero section of the forum.'),
  ];

  $form['allow_anonymous_view'] = [
    '#type' => 'checkbox',
    '#title' => t('Allow Anonymous Viewing'),
    '#default_value' => $config->get('allow_anonymous_view'),
    '#description' => t('Allow users to view channels without logging in. This does not allow posting or interaction.'),
  ];

  $form['max_post_length'] = [
    '#type' => 'number',
    '#title' => t('Maximum Post Length'),
    '#default_value' => $config->get('max_post_length'),
    '#description' => t('The maximum length of a chat message in characters. Set to 0 for no limit.'),
    '#min' => 1,
  ];

  $form['enable_threading'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable Threading'),
    '#default_value' => $config->get('enable_threading'),
    '#description' => t('Allow users to reply to specific messages, creating threaded conversations.'),
  ];

  $form['submit'] = [
    '#type' => 'submit',
    '#value' => t('Save settings'),
  ];

  return $form;
}

function acuity_social_settings_form_submit($form, &$form_state) {
  $config = config('acuity_social.settings');
  foreach ([
    'forum_name',
    'hero_header',
    'hero_description',
    'default_channel',
    'allow_anonymous_view',
    'max_post_length',
    'enable_threading',
  ] as $key) {
    $config->set($key, $form_state['values'][$key]);
  }
  $config->save();
  backdrop_set_message(t('Acuity Social settings saved.'));
}

/**
 * Implements hook_entity_info().
 */
function acuity_social_entity_info() {
  $info = [];

  // Social Channel entity.
  $info['acuity_social_channel'] = [
    'label' => t('Social Channel'),
    'entity class' => 'AcuitySocialChannel',
    'controller class' => 'AcuitySocialChannelController',
    'base table' => 'abms_social_channel',
    'fieldable' => TRUE,
    'entity keys' => [
      'id' => 'id',
      'label' => 'channel_name',
      'bundle' => 'bundle',
    ],
    'bundles' => [
      'default' => [
        'label' => t('Social Channel'),
        'admin' => [
          'path' => 'admin/acuity/social/channels/structure',
          'access arguments' => ['administer social channels'],
        ],
      ],
    ],
    'view modes' => [
      'full' => [
        'label' => t('Full'),
        'custom settings' => TRUE,
      ],
      'teaser' => [
        'label' => t('Teaser'),
        'custom settings' => TRUE,
      ],
    ],
    'module' => 'acuity_social',
  ];

  // Chat entity.
  $info['acuity_social_chat'] = [
    'label' => t('Social Chat'),
    'entity class' => 'AcuitySocialChat',
    //'controller class' => 'EntityPlusController',
    'controller class' => 'AcuitySocialChatController',
    'base table' => 'abms_social_chat',
    'fieldable' => TRUE,
    'entity keys' => [
      'id' => 'id',
      'label' => 'chat_message',
      'bundle' => 'bundle',
    ],
    'bundles' => [
      'default' => [
        'label' => t('Social Chat'),
        'admin' => [
          'path' => 'admin/acuity/social/chats/structure',
          'access arguments' => ['administer chats'],
        ],
      ],
    ],
    'view modes' => [
      'full' => [
        'label' => t('Full'),
        'custom settings' => TRUE,
      ],
      'teaser' => [
        'label' => t('Teaser'),
        'custom settings' => TRUE,
      ],
    ],
    'module' => 'acuity_social',
  ];

  return $info;
}


/**
 * Implements hook_permission().
 */
function acuity_social_permission() {
  return array(
    'administer acuity social' => array(
      'title' => t('Administer Acuity Social settings'),
      'description' => t('Access the main configuration page for the Acuity Social module.'),
      'restrict access' => TRUE,
    ),
    'view acuity social channels' => array(
      'title' => t('View social channels'),
      'description' => t('View the main feed and individual social channel pages.'),
    ),
    'create acuity social channels' => array(
      'title' => t('Create new social channels'),
      'description' => t('Allows users to post new topics/channels.'),
    ),
    'edit own acuity social channels' => array(
      'title' => t('Edit own social channels'),
      'description' => t('Allows users to edit the channels they have created.'),
    ),
    'delete own acuity social channels' => array(
      'title' => t('Delete own social channels'),
      'description' => t('Allows users to delete the channels they have created.'),
    ),
    'delete any acuity social channels' => array(
      'title' => t('Delete any social channels'),
      'description' => t('Allows moderators to delete channels created by any user.'),
    ),
  );
}



/**
 * Menu loader function for acuity_social_channel entities.
 *
 * This function is called by Backdrop whenever a URL contains
 * '%acuity_social_channel' to load the entity object.
 */
function acuity_social_channel_load($cid) {
  return entity_load('acuity_social_channel', $cid);
}

/**
 * Page callback to view a single channel entity.
 */
function acuity_social_channel_page_view($acuity_social_channel) {
  // The entity_view() function renders the entity using its template file.
  return entity_view('acuity_social_channel', [$acuity_social_channel->cid => $acuity_social_channel]);
}

/**
 * Access callback for acuity_social_channel entities.
 *
 * This function checks permissions for various operations.
 */
function acuity_social_channel_access($op, $acuity_social_channel) {
  $account = $GLOBALS['user'];

  switch ($op) {
    case 'view':
      return user_access('view acuity social channels', $account);

    case 'update':
      // Check if the user can edit their own channel.
      if (user_access('edit own acuity social channels', $account) && $account->uid == $acuity_social_channel->uid) {
        return TRUE;
      }
      break;

    case 'delete':
      // Check if the user is a moderator.
      if (user_access('delete any acuity social channels', $account)) {
        return TRUE;
      }
      // Check if the user can delete their own channel.
      if (user_access('delete own acuity social channels', $account) && $account->uid == $acuity_social_channel->uid) {
        return TRUE;
      }
      break;
  }

  return FALSE;
}